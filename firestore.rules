service cloud.firestore {
  match /databases/{database}/documents {

match /assets/{assetId} {
  allow aggregate: if request.auth != null && (
    request.auth.token.admin == true ||
    request.auth.token.manager == true
  );
}

    // ✅ Helper functions
    function isAdmin() {
      return request.auth != null && (
        request.auth.token.admin == true ||
        (userData() != null && userData().role == 'admin')
      );
    }

    function isDesigner() {
      return request.auth != null && userData() != null && userData().role == 'designer';
    }

    function isManager() {
      return request.auth != null && (
        request.auth.token.manager == true ||
        (userData() != null && (
          userData().role == 'manager' ||
          userData().role == 'project-manager' ||
          userData().role == 'ops'
        ))
      );
    }

    function isEditor() {
      return request.auth != null && userData() != null && userData().role == 'editor';
    }

    function isOps() {
      return request.auth != null && (
        request.auth.token.ops == true ||
        (userData() != null && userData().role == 'ops')
      );
    }

    function isIntegrationPrivileged() {
      return isAdmin() || isOps();
    }

    function isClient() {
      return request.auth != null && userData() != null && userData().role == 'client';
    }

    function userData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasBrandAccess(brandCode) {
      return request.auth != null &&
        userData() != null &&
        userData().brandCodes != null &&
        brandCode is string &&
        userData().brandCodes.hasAny([brandCode]);
    }

    function isPublicReviewer() {
      return request.auth == null ||
             request.auth.token.firebase.sign_in_provider == 'anonymous';
    }

    function reviewDocFieldKeys() {
      return [
        'status',
        'lockedBy',
        'lockedByUid',
        'reviewProgress',
        'reviewComment',
        'lastReviewedAt',
        'reviewedCount',
        'approvedCount',
        'rejectedCount',
        'editCount',
        'archivedCount',
        'lastUpdated',
        'thumbnailUrl',
        'clientNote',
        'clientNoteTimestamp',
        'hasClientNote'
      ];
    }

    function publicReviewEnvelopeKeys() {
      return ['type', 'update', 'createdAt', 'reviewer', 'source'];
    }

    function publicReviewUpdateKeys() {
      return reviewDocFieldKeys().concat([
        'reviewedCountDelta',
        'approvedCountDelta',
        'rejectedCountDelta',
        'editCountDelta',
        'archivedCountDelta',
        'completedAt',
        'assetId',
        'assetStatus',
        'recipeCode',
        'brandCode'
      ]);
    }

    function isReviewFieldUpdate() {
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(reviewDocFieldKeys());
    }

    function isReviewedStatusUpdate() {
      return isReviewFieldUpdate() &&
        request.resource.data.keys().hasAny(['status']) &&
        request.resource.data.status == 'reviewed';
    }

    // ✅ Global Settings
    match /settings/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /siteSettings/{docId}/subscriptionPlans/{planId} {
      allow read, write: if isAdmin();
    }

    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if isManager();
      allow read, write: if isAdmin();
    }

    match /agencies/{agencyId} {
      allow read: if true;
      allow write: if isAdmin() || (request.auth != null && userData().agencyId == agencyId);
    }

    match /brands/{brandId} {
      allow read: if true;
      allow update: if isAdmin() || isManager() || isEditor() ||
        (hasBrandAccess(resource.data.code) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['helpdeskNotes'])) ||
        (isClient() &&
         userData().brandCodes != null &&
         userData().brandCodes.hasAny([resource.data.code]) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['products', 'credits']) &&
         (!request.resource.data.keys().hasAny(['credits']) ||
          request.resource.data.credits <= resource.data.credits)
        );
      allow delete: if isAdmin();
      allow create: if isAdmin();
    }

    match /brands/{brandId}/notes/{noteId} {
      allow read, write: if isAdmin() || isManager() || isEditor() || isOps();
    }

    match /brands/{brandId}/assets/{assetId} {
      allow read, count: if request.auth != null;
    }

    // ✅ Brand Stats
    match /brandStats/{brandId} {
      allow read: if isAdmin() || isManager();
      allow write: if isAdmin();
    }

    match /dashboardNotes/{noteId} {
      allow read, write: if isAdmin() || isOps();
    }

    match /componentInstances/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /csvImportTypes/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ✅ Ad Groups and Subcollections
    match /adGroups/{groupId} {
      allow read: if (
        resource.data.visibility == "public" && !resource.data.requireAuth
      ) || isAdmin() || userData().role != 'designer' || (
        request.auth != null &&
        userData().role == 'designer' &&
        resource.data.designerId == request.auth.uid
      );

      allow create: if request.auth != null;
      allow update: if isAdmin() || isManager() ||
        (isClient() && isReviewFieldUpdate()) ||
        (isPublicReviewer() && isReviewedStatusUpdate()) ||
        (request.auth != null && resource.data.uploadedBy == request.auth.uid) ||
        (isDesigner() && resource.data.designerId == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'status',
            'visibility',
           'requireAuth',
           'requirePassword',
           'password'
         ])
        ) ||
        (isEditor() && resource.data.editorId == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'status',
           'blocker'
         ]) &&
         (!request.resource.data.keys().hasAny(['status']) ||
          ['new', 'briefed', 'blocked'].hasAny([request.resource.data.status]))
        );
      allow delete: if isAdmin();

      match /assets/{assetId} {
        allow read, list, count: if request.auth != null || (
          get(/databases/$(database)/documents/adGroups/$(groupId)).data.visibility == "public" &&
          !get(/databases/$(database)/documents/adGroups/$(groupId)).data.requireAuth
        );
        allow write: if request.auth != null;
      }

      match /{document=**} {
        allow read: if (
          get(/databases/$(database)/documents/adGroups/$(groupId)).data.visibility == "public" &&
          !get(/databases/$(database)/documents/adGroups/$(groupId)).data.requireAuth
        ) || isAdmin() || userData().role != 'designer' || (
          request.auth != null &&
          userData().role == 'designer' &&
          get(/databases/$(database)/documents/adGroups/$(groupId)).data.designerId == request.auth.uid
        );
        allow write: if request.auth != null || (
          isPublicReviewer() &&
          request.path.matches(
            "/databases/$(database)/documents/adGroups/$(groupId)/publicUpdates/{updateId}"
          ) &&
          request.resource.data.keys().hasOnly(publicReviewEnvelopeKeys()) &&
          ('update' in request.resource.data) &&
          request.resource.data.update is map &&
          request.resource.data.update.keys().hasOnly(publicReviewUpdateKeys())
        );
      }
    }

    match /recipeTypes/{docId} {
      allow read: if isAdmin() || isManager() || isEditor() || isDesigner() || resource.data.external == true;
      allow write: if isAdmin();
    }

    match /componentTypes/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /adAssets/{assetId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // ✅ Reviews
    match /reviews/{reviewId} {
      function isIntegrationExportUpdate() {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'assignedIntegrationId',
          'exportStatus',
          'lastExport'
        ]);
      }

      allow read: if false;
      allow create: if true;
      allow update: if isAdmin() || (isOps() && isIntegrationExportUpdate());
      allow delete: if isAdmin();
    }

    match /integrations/{integrationId} {
      allow read: if isIntegrationPrivileged();
      allow create, update, delete: if isAdmin();

      match /versions/{versionId} {
        allow read: if isIntegrationPrivileged();
        allow create: if isAdmin();
        allow update, delete: if false;
      }
    }

    match /integration_failures/{docId} {
      allow read, write: if isIntegrationPrivileged();
    }

    match /recipes/{id} {
      allow read: if true;
      allow write: if request.auth != null;
    }

match /{path=**} {
  match /assets/{assetId} {
    allow get, list, aggregate: if
      request.auth != null && (
        isAdmin() || isManager() || isEditor() || isDesigner() ||
        (isClient() &&
          userData().brandCodes != null &&
          userData().brandCodes.hasAny([resource.data.brandCode]) &&
          resource.data.status == 'approved')
      );
  }
}

    match /notifications/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /notificationRules/{docId} {
      allow read, write: if isAdmin();
    }

    match /taggerJobs/{jobId} {
      allow read, write: if request.auth != null;
    }

    match /copyRecipeTypes/{docId} {
      allow read: if true;
      allow write: if isAdmin() || isManager();
    }

    match /projects/{projectId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    match /requests/{docId} {
      function isRequestCreator() {
        return request.auth != null && resource.data.createdBy == request.auth.uid;
      }

      function isRequestParticipant() {
        return request.auth != null &&
          resource.data.participants != null &&
          resource.data.participants.hasAny([request.auth.uid]);
      }

      function isHelpdeskMetaUpdate() {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'lastMessageAt',
          'lastMessagePreview',
          'lastMessageAuthor',
          'updatedAt',
          'messagesCount',
          'participants',
        ]);
      }

      function isReviewHelpdeskRequest() {
        return resource.data.type == 'helpdesk' &&
          resource.data.metadata != null &&
          resource.data.metadata.source == 'review';
      }

      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;

      allow read: if isAdmin() || isManager() || isEditor() || isRequestCreator() ||
        isRequestParticipant() || (request.auth != null && isReviewHelpdeskRequest());

      allow update: if isAdmin() || isManager() || isEditor() || isRequestCreator() ||
        (isRequestParticipant() && isHelpdeskMetaUpdate()) ||
        (request.auth != null && isReviewHelpdeskRequest() && isHelpdeskMetaUpdate());

      allow delete: if isAdmin() || isManager() || isEditor();

      match /messages/{messageId} {
        function parentRequest() {
          return get(/databases/$(database)/documents/requests/$(docId)).data;
        }

        function isReviewHelpdeskParent() {
          return parentRequest().type == 'helpdesk' &&
            parentRequest().metadata != null &&
            parentRequest().metadata.source == 'review';
        }

        function canCollaborateOnMessages() {
          return request.auth != null && (
            parentRequest().createdBy == request.auth.uid ||
            (parentRequest().participants != null &&
              parentRequest().participants.hasAny([request.auth.uid])) ||
            isReviewHelpdeskParent()
          );
        }

        function canAccessMessages() {
          return isAdmin() || isManager() || isEditor() || canCollaborateOnMessages();
        }

        allow read: if canAccessMessages();
        allow create: if canAccessMessages();
      }
    }

    match /creditLogs/{logId} {
      allow create: if request.auth != null;
      allow read: if isAdmin();
    }

    match /designers/{docId} {
      allow read: if isAdmin() || isManager();
    }
  }
}
